// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson96d41fe8DecodeGithubComOlivereElastic(in *jlexer.Lexer, out *BulkService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic(out *jwriter.Writer, in BulkService) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkService) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson96d41fe8EncodeGithubComOlivereElastic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkService) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson96d41fe8EncodeGithubComOlivereElastic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkService) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson96d41fe8DecodeGithubComOlivereElastic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkService) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson96d41fe8DecodeGithubComOlivereElastic(l, v)
}
func easyjson96d41fe8DecodeGithubComOlivereElastic1(in *jlexer.Lexer, out *BulkResponseItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_index":
			out.Index = string(in.String())
		case "_type":
			out.Type = string(in.String())
		case "_id":
			out.Id = string(in.String())
		case "_version":
			out.Version = int64(in.Int64())
		case "result":
			out.Result = string(in.String())
		case "_shards":
			if in.IsNull() {
				in.Skip()
				out.Shards = nil
			} else {
				if out.Shards == nil {
					out.Shards = new(shardsInfo)
				}
				easyjson96d41fe8DecodeGithubComOlivereElastic2(in, &*out.Shards)
			}
		case "_seq_no":
			out.SeqNo = int64(in.Int64())
		case "_primary_term":
			out.PrimaryTerm = int64(in.Int64())
		case "status":
			out.Status = int(in.Int())
		case "forced_refresh":
			out.ForcedRefresh = bool(in.Bool())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(ErrorDetails)
				}
				easyjson96d41fe8DecodeGithubComOlivereElastic3(in, &*out.Error)
			}
		case "get":
			if in.IsNull() {
				in.Skip()
				out.GetResult = nil
			} else {
				if out.GetResult == nil {
					out.GetResult = new(GetResult)
				}
				easyjson96d41fe8DecodeGithubComOlivereElastic4(in, &*out.GetResult)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic1(out *jwriter.Writer, in BulkResponseItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != "" {
		const prefix string = ",\"_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Type != "" {
		const prefix string = ",\"_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Id != "" {
		const prefix string = ",\"_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Version != 0 {
		const prefix string = ",\"_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if in.Result != "" {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	if in.Shards != nil {
		const prefix string = ",\"_shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson96d41fe8EncodeGithubComOlivereElastic2(out, *in.Shards)
	}
	if in.SeqNo != 0 {
		const prefix string = ",\"_seq_no\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SeqNo))
	}
	if in.PrimaryTerm != 0 {
		const prefix string = ",\"_primary_term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrimaryTerm))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	if in.ForcedRefresh {
		const prefix string = ",\"forced_refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ForcedRefresh))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson96d41fe8EncodeGithubComOlivereElastic3(out, *in.Error)
	}
	if in.GetResult != nil {
		const prefix string = ",\"get\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson96d41fe8EncodeGithubComOlivereElastic4(out, *in.GetResult)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkResponseItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson96d41fe8EncodeGithubComOlivereElastic1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkResponseItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson96d41fe8EncodeGithubComOlivereElastic1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkResponseItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson96d41fe8DecodeGithubComOlivereElastic1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkResponseItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson96d41fe8DecodeGithubComOlivereElastic1(l, v)
}
func easyjson96d41fe8DecodeGithubComOlivereElastic4(in *jlexer.Lexer, out *GetResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_index":
			out.Index = string(in.String())
		case "_type":
			out.Type = string(in.String())
		case "_id":
			out.Id = string(in.String())
		case "_uid":
			out.Uid = string(in.String())
		case "_routing":
			out.Routing = string(in.String())
		case "_parent":
			out.Parent = string(in.String())
		case "_version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(int64)
				}
				*out.Version = int64(in.Int64())
			}
		case "_source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Source).UnmarshalJSON(data))
				}
			}
		case "found":
			out.Found = bool(in.Bool())
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fields = make(map[string]interface{})
				} else {
					out.Fields = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Fields)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(ErrorDetails)
				}
				easyjson96d41fe8DecodeGithubComOlivereElastic3(in, &*out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic4(out *jwriter.Writer, in GetResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"_uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uid))
	}
	{
		const prefix string = ",\"_routing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Routing))
	}
	{
		const prefix string = ",\"_parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parent))
	}
	{
		const prefix string = ",\"_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Version == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Version))
		}
	}
	if in.Source != nil {
		const prefix string = ",\"_source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Source).MarshalJSON())
	}
	if in.Found {
		const prefix string = ",\"found\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Found))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Fields {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson96d41fe8EncodeGithubComOlivereElastic3(out, *in.Error)
	}
	out.RawByte('}')
}
func easyjson96d41fe8DecodeGithubComOlivereElastic3(in *jlexer.Lexer, out *ErrorDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		case "resource.type":
			out.ResourceType = string(in.String())
		case "resource.id":
			out.ResourceId = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "phase":
			out.Phase = string(in.String())
		case "grouped":
			out.Grouped = bool(in.Bool())
		case "caused_by":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CausedBy = make(map[string]interface{})
				} else {
					out.CausedBy = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.CausedBy)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "root_cause":
			if in.IsNull() {
				in.Skip()
				out.RootCause = nil
			} else {
				in.Delim('[')
				if out.RootCause == nil {
					if !in.IsDelim(']') {
						out.RootCause = make([]*ErrorDetails, 0, 8)
					} else {
						out.RootCause = []*ErrorDetails{}
					}
				} else {
					out.RootCause = (out.RootCause)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *ErrorDetails
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ErrorDetails)
						}
						easyjson96d41fe8DecodeGithubComOlivereElastic3(in, &*v4)
					}
					out.RootCause = append(out.RootCause, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failed_shards":
			if in.IsNull() {
				in.Skip()
				out.FailedShards = nil
			} else {
				in.Delim('[')
				if out.FailedShards == nil {
					if !in.IsDelim(']') {
						out.FailedShards = make([]map[string]interface{}, 0, 8)
					} else {
						out.FailedShards = []map[string]interface{}{}
					}
				} else {
					out.FailedShards = (out.FailedShards)[:0]
				}
				for !in.IsDelim(']') {
					var v5 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v5 = make(map[string]interface{})
						} else {
							v5 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v6 interface{}
							if m, ok := v6.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v6.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v6 = in.Interface()
							}
							(v5)[key] = v6
							in.WantComma()
						}
						in.Delim('}')
					}
					out.FailedShards = append(out.FailedShards, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic3(out *jwriter.Writer, in ErrorDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	if in.ResourceType != "" {
		const prefix string = ",\"resource.type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceType))
	}
	if in.ResourceId != "" {
		const prefix string = ",\"resource.id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceId))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phase))
	}
	if in.Grouped {
		const prefix string = ",\"grouped\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Grouped))
	}
	if len(in.CausedBy) != 0 {
		const prefix string = ",\"caused_by\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.CausedBy {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.RootCause) != 0 {
		const prefix string = ",\"root_cause\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.RootCause {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjson96d41fe8EncodeGithubComOlivereElastic3(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.FailedShards) != 0 {
		const prefix string = ",\"failed_shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.FailedShards {
				if v10 > 0 {
					out.RawByte(',')
				}
				if v11 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v12First := true
					for v12Name, v12Value := range v11 {
						if v12First {
							v12First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v12Name))
						out.RawByte(':')
						if m, ok := v12Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v12Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v12Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson96d41fe8DecodeGithubComOlivereElastic2(in *jlexer.Lexer, out *shardsInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "successful":
			out.Successful = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic2(out *jwriter.Writer, in shardsInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"successful\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Successful))
	}
	{
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Failed))
	}
	out.RawByte('}')
}
func easyjson96d41fe8DecodeGithubComOlivereElastic5(in *jlexer.Lexer, out *BulkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.Took = int(in.Int())
		case "errors":
			out.Errors = bool(in.Bool())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]map[string]*BulkResponseItem, 0, 8)
					} else {
						out.Items = []map[string]*BulkResponseItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v13 map[string]*BulkResponseItem
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v13 = make(map[string]*BulkResponseItem)
						} else {
							v13 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v14 *BulkResponseItem
							if in.IsNull() {
								in.Skip()
								v14 = nil
							} else {
								if v14 == nil {
									v14 = new(BulkResponseItem)
								}
								(*v14).UnmarshalEasyJSON(in)
							}
							(v13)[key] = v14
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Items = append(out.Items, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson96d41fe8EncodeGithubComOlivereElastic5(out *jwriter.Writer, in BulkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Took != 0 {
		const prefix string = ",\"took\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Took))
	}
	if in.Errors {
		const prefix string = ",\"errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Errors))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Items {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v17First := true
					for v17Name, v17Value := range v16 {
						if v17First {
							v17First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v17Name))
						out.RawByte(':')
						if v17Value == nil {
							out.RawString("null")
						} else {
							(*v17Value).MarshalEasyJSON(out)
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson96d41fe8EncodeGithubComOlivereElastic5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson96d41fe8EncodeGithubComOlivereElastic5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson96d41fe8DecodeGithubComOlivereElastic5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson96d41fe8DecodeGithubComOlivereElastic5(l, v)
}
